import random
import math
import matplotlib.pyplot as plt

def distance(point1, point2):
    return math.sqrt((point2[0]-point1[0])**2 + (point2[1]-point1[1])**2)

def fitness(solution, cities):
    total_distance = 0
    for i in range(len(solution)-1):
        total_distance += distance(cities[solution[i]], cities[solution[i+1]])
    total_distance += distance(cities[solution[-1]], cities[solution[0]])
    return total_distance

def initialize_population(population_size, num_cities):
    population = []
    for _ in range(population_size):
        population.append(random.sample(range(num_cities), num_cities))
    return population

def select_parents(population, num_parents):
    parents = []
    population_size = len(population)
    fitness_values = [fitness(solution, cities) for solution in population]
    for _ in range(num_parents):
        random_index = random.randint(0, population_size-1)
        parents.append(population[random_index])
    return parents

def crossover(parent1, parent2):
    child = [-1] * len(parent1)
    start = random.randint(0, len(parent1)-1)
    end = random.randint(0, len(parent1)-1)
    if start > end:
        start, end = end, start
    for i in range(start, end+1):
        child[i] = parent1[i]
    remaining = [gene for gene in parent2 if gene not in child]
    for i in range(len(child)):
        if child[i] == -1:
            child[i] = remaining.pop(0)
    return child

def mutate(solution, mutation_rate):
    for i in range(len(solution)):
        if random.random() < mutation_rate:
            j = random.randint(0, len(solution)-1)
            solution[i], solution[j] = solution[j], solution[i]
    return solution

def create_offspring(parents, population_size, mutation_rate):
    offspring = []
    num_parents = len(parents)
    while len(offspring) < population_size:
        parent1 = parents[random.randint(0, num_parents-1)]
        parent2 = parents[random.randint(0, num_parents-1)]
        child = crossover(parent1, parent2)
        child = mutate(child, mutation_rate)
        offspring.append(child)
    return offspring

def genetic_algorithm(population_size, num_cities, max_generations, mutation_rate):
    population = initialize_population(population_size, num_cities)
    best_fitness = float('inf')
    best_solution = []
    best_fitnesses = []
    for generation in range(max_generations):
        parents = select_parents(population, population_size // 2)
        offspring = create_offspring(parents, population_size, mutation_rate)
        population = parents + offspring
        population_fitness = [fitness(solution, cities) for solution in population]
        population_fitness.sort()
        current_best_fitness = population_fitness[0]
        if current_best_fitness < best_fitness:
            best_fitness = current_best_fitness
            best_solution = population[population_fitness.index(current_best_fitness)]
        best_fitnesses.append(best_fitness)
    return best_solution, best_fitness, best_fitnesses

# Define the cities
cities = [(60, 200), (180, 200), (80, 180), (140, 180), (20, 160), (100, 160), (200, 160), 
          (140, 140), (40, 120), (100, 120), (180, 100), (60, 80), (120, 80), (180, 60), 
          (20, 40), (100, 40), (200, 40), (20, 20), (60, 20), (160, 20)]

# Run the genetic algorithm
population_size = 100
max_generations = 100
mutation_rate = 0.01
best_solution, best_fitness, best_fitnesses = genetic_algorithm(population_size, len(cities), max_generations, mutation_rate)

# Print the best solution and its fitness
print("Best solution: ", best_solution)
print("Best fitness: ", round(best_fitness, 2))

# Plot the convergence of the genetic algorithm
plt.plot(best_fitnesses)
plt.xlabel('Generation')
plt.ylabel('Best Fitness')


plt.show()






import matplotlib.pyplot as plt

# Plot the cities
x = [city[0] for city in cities]
y = [city[1] for city in cities]
plt.scatter(x, y)

# Plot the path traveled by the salesman
x = [cities[best_solution[i]][0] for i in range(len(best_solution))]
y = [cities[best_solution[i]][1] for i in range(len(best_solution))]
x.append(cities[best_solution[0]][0])
y.append(cities[best_solution[0]][1])
plt.plot(x, y)

# Show the plot
plt.show()
